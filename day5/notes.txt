slide
https://talks.godoc.org/github.com/iporsut/gotraining-slide/day5.slide#1

IO
r := strings.NewReader("some io.Reader stream to be read\n")
^ เป็นการแปลง string ให้ไปเป็น reader เหมาะกับการใช้ test

io.Copy(os.Stdout, os.Stdin) <- เหมือน echo ใน terminal
แต่จริงๆ สามารถ Redirect Stdin หรือ Stdout ได้ โดยใช้ command "[ลูกศร < หรือ >] somefile.txt" มันจะอ่านไฟล์/เขียนลง file นั้นแทน

มี Method ReadAll ที่จะเอาข้อมูลเก็บลง byte[] ซึ่งถ้าลองใช้แทน จะมี step ตามนี้
เราก็จะต้องพิมพ์เยอะกว่าดังนี้
-Open()     --|
              |-> รวบไปใช้ Method ReadFile แทนได้
-ReadAll()  --|
-Print()

Multireader มันจะ return Type Reader ออกมาให้
- example 1
io.MultiReader(r1, r2, r3)

- example 2
readers[] (เป็น slice)
io.MultiReader(readers...) <- ... แปลว่ามันจะกระจาย element ใน slice ลง comma ให้

MultiWriter ตัวอย่างการใช้งานที่เจอบ่อยก็คือ write ทีเดียว ออกทั้งไฟล์และหน้าจอ

err := ioutil.WriteFile("testdata/hello", message, 0644) เลข 0644 คร่าวๆ คือกำกับ UNIX-based permission แต่ละกลุ่ม

io.ReadCloser คือ Reader ที่มี Method Close มี func NopCloser แปลง Reader ให้เป็น ReadCloser ได้ด้วย

string กับ byte[] มีการใช้งานต่างๆ ใกล้เคียงกันมาก 

Bingo https://medium.com/@iPorsut/vscode-go-auto-complete-ด้วย-bingo-language-server-protocol-82e3fff345f

ตัวอย่างเรียก command line ผ่าน go
cmd := exec.Command("tr", "a-z", "A-Z") เท่ากับ tr a-z A-Z

---------------------------------
เรื่องของ encode JSON/XML/CSV (Comma-separated values)

ตัวอย่าง Encoder
enc := json.NewEncoder(os.Stdout)
err := enc.Encode(t)
จะเห็นว่าสามารถร้อย data จาก Stdout ไปเข้า encode ได้ทันทีโดยไม่ต้องเอาไปพักใน buffer อะไรก่อนเลย

Decode แนวเดียวกับ encode โดยต้องประกาศก่อน แล้วค่อยเรียก Method ของมัน

CSVReader พอ ReadAll มันจะ return มาให้เป็น 2D array เลย
CSVWriter ถ้าใช้ Write (ที่ไม่ใช้ WriteAll) ต้อง flush ตอนท้ายเพื่อสั่ง write สิ่งที่ค้างใน buffer จริงๆ

---------------------------------

go.mod นอกจาก specify version ด้วยเลขได้แล้ว ยัง specify ด้วย git commit id ได้ด้วย